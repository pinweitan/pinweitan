


SELECT * FROM EXERCISECATEGORY 
INNER JOIN EXERCISE ON 
EXERCISECATEGORY.EXERCISECATEGORYID = EXERCISE.EXERCISECATEGORYID




-- Select all columns from ExerciseCategory and Exercise.
-- The tables should be joined on ExerciseCategoryId.
-- This query returns all Exercises and their associated ExerciseCategory.
-- 64 rows


SELECT
EXERCISE.NAME, EXERCISECATEGORY.NAME
FROM ExerciseCategory 
JOIN Exercise 
ON EXERCISECATEGORY.ExerciseCategoryId = EXERCISE.ExerciseCategoryId
WHERE EXERCISECATEGORY.ParentCategoryId IS NULL;


SELECT EXERCISE.NAME AS ExerciseName, ExerciseCategory.NAME AS CategoryName
FROM EXERCISECATEGORY
JOIN exercise
ON EXERCISECATEGORY.ExerciseCategoryId = EXERCISE.ExerciseCategoryId
WHERE EXERCISECATEGORY.ParentCategoryId IS NULL;




-- The query above is a little confusing. At first glance, it's hard to tell
-- which Name belongs to ExerciseCategory and which belongs to Exercise.
-- Rewrite the query using an aliases. 
-- Alias ExerciseCategory.Name as 'CategoryName'.
-- Alias Exercise.Name as 'ExerciseName'.
-- 9 rows
--------------------
SELECT LOGIN.EmailAddress, FirstName, LastName, BirthDate from client
JOIN LOGIN
ON client.CLIENTID = login.clientID
WHERE client.birthdate BETWEEN '1990-01-01' AND '1999-12-31';


-- Select FirstName, LastName, and BirthDate from Client
-- and EmailAddress from Login 
-- where Client.BirthDate is in the 1990s.
-- Join the tables by their key relationship. 
-- What is the primary-foreign key relationship?
-- 35 rows
--------------------

SELECT
WORKOUT.NAME, FIRSTNAME, LASTNAME
FROM Client 
INNER JOIN ClientWorkout 
ON CLIENT.ClientId = CLIENTWORKOUT.ClientId
INNER JOIN Workout 
ON CLIENTWORKOUT.WorkoutId = WORKOUT.WorkoutId
WHERE CLIENT.LastName LIKE 'C%';

-- Select Workout.Name, Client.FirstName, and Client.LastName
-- for Clients with LastNames starting with 'C'?
-- How are Clients and Workouts related?
-- 25 rows
--------------------
SELECT GOAL.NAME AS GN, WORKOUT.NAME AS WN
FROM workout
INNER JOIN workoutgoal
ON WORKOUT.WORKOUTID = WORKOUTGOAL.WORKOUTID
INNER JOIN GOAL
ON workoutGOAL.GOALID = GOAL.GOALID




-- Select Names from Workouts and their Goals.
-- This is a many-to-many relationship with a bridge table.
-- Use aliases appropriately to avoid ambiguous columns in the result.
--------------------

SELECT LOGIN.EMAILADDRESS, LOGIN.CLIENTID, FIRSTNAME, LASTNAME 
FROM CLIENT
LEFT JOIN 
Login ON 
CLIENT.ClientId = LOGIN.ClientId;


-- Select FirstName and LastName from Client.
-- Select ClientId and EmailAddress from Login.
-- Join the tables, but make Login optional.
-- 500 rows
--------------------
SELECT LOGIN.EMAILADDRESS, LOGIN.CLIENTID, FIRSTNAME, LASTNAME 
FROM CLIENT
LEFT JOIN 
Login ON 
CLIENT.ClientId = LOGIN.ClientId
WHERE LOGIN.CLIENTID IS NULL





-- Using the query above as a foundation, select Clients
-- who do _not_ have a Login.
-- 200 rows
--------------------
SELECT LOGIN.EMAILADDRESS, LOGIN.CLIENTID, FIRSTNAME, LASTNAME 
FROM CLIENT
LEFT JOIN 
Login ON 
CLIENT.ClientId = LOGIN.ClientId
WHERE CLIENT.FIRSTNAME = 'ROMEO' AND LASTNAME = 'SEAWARD'

-- Does the Client, Romeo Seaward, have a Login?
-- Decide using a single query.
-- nope :(
--------------------
SELECT
-- Select ExerciseCategory.Name and its parent ExerciseCategory's Name.
-- This requires a self-join.
-- 12 rows
--------------------
SELECT parent.Name AS ParentCategory, child.Name AS Category
FROM ExerciseCategory child
JOIN ExerciseCategory parent
	ON child.ParentCategoryId = parent.ExerciseCategoryId;





SELECT PARENTCATEGORYID AS WORKOUTTYPES, ExercisecategoryID
FROM EXERCISECATEGORY
I JOIN EXERCISECATEGORY 
ON EXERCISECATEGORY.EXERCISECATEGORYID = EXERCISECATEGORY.ParentCATEGORYID 
-- Rewrite the query above so that every ExerciseCategory.Name is
-- included, even if it doesn't have a parent.
-- 16 rows
--------------------
SELECT parent.Name AS ParentCategory, child.Name AS Category
FROM ExerciseCategory child
JOIN ExerciseCategory parent
	ON child.ParentCategoryId = parent.ExerciseCategoryId;



SELECT
parent.Name AS ParentCategory, child.Name AS Category
FROM ExerciseCategory CHILD
LEFT OUTER JOIN ExerciseCategory PARENT 
ON CHILD.ParentCategoryId = PARENT.ExerciseCategoryId;
-- Are there Clients who are not signed up for a Workout?
-- 50 rows
SELECT
	CLIENT.FirstName,
    CLIENT.LastName
FROM Client 
LEFT OUTER JOIN ClientWorkout ON CLIENT.ClientId = CLIENTWORKOUT.ClientId
WHERE CLIENTWORKOUT.WorkoutId IS NULL;-----------------

-- Which Beginner-Level Workouts satisfy at least one of Shell Creane's Goals?
-- Goals are associated to Clients through ClientGoal.
-- Goals are associated to Workouts through WorkoutGoal.
-- 6 rows, 4 unique rows
--------------------
SELECT
	w.WorkoutId,
	w.`Name` WorkoutName
FROM Client c
INNER JOIN ClientGoal cg ON c.ClientId = cg.ClientId
INNER JOIN WorkoutGoal wg ON cg.GoalId = wg.GoalId
INNER JOIN Workout w ON wg.WorkoutId = w.WorkoutId
WHERE c.FirstName = 'Shell'
AND c.LastName = 'Creane'
AND w.LevelId = 1;

-- Select all Workouts. 
-- Join to the Goal, 'Core Strength', but make it optional.
-- You may have to look up the GoalId before writing the main query.
-- If you filter on Goal.Name in a WHERE clause, Workouts will be excluded.
-- Why?
-- 26 Workouts, 4 Goals
--------------------
SELECT
	w.`Name` WorkoutName,
    g.`Name` GoalName
FROM Workout w
LEFT OUTER JOIN WorkoutGoal wg 
	ON w.WorkoutId = wg.WorkoutId AND wg.GoalId = 10
LEFT OUTER JOIN Goal g ON wg.GoalId = g.GoalId;

-- The relationship between Workouts and Exercises is... complicated.
-- Workout links to WorkoutDay (one day in a Workout routine)
-- which links to WorkoutDayExerciseInstance 
-- (Exercises can be repeated in a day so a bridge table is required) 
-- which links to ExerciseInstance 
-- (Exercises can be done with different weights, repetions,
-- laps, etc...) 
-- which finally links to Exercise.
-- Select Workout.Name and Exercise.Name for related Workouts and Exercises.
--------------------
SELECT
	w.`Name` WorkoutName,
    e.`Name` ExerciseName
FROM Workout w
INNER JOIN WorkoutDay wd 
	ON w.WorkoutId = wd.WorkoutId
INNER JOIN WorkoutDayExerciseInstance wdei 
	ON wd.WorkoutDayId = wdei.WorkoutDayId
INNER JOIN ExerciseInstance ei 
	ON wdei.ExerciseInstanceId = ei.ExerciseInstanceId
INNER JOIN Exercise e 
	ON ei.ExerciseId = e.ExerciseId;
   
-- An ExerciseInstance is configured with ExerciseInstanceUnitValue.
-- It contains a Value and UnitId that links to Unit.
-- Example Unit/Value combos include 10 laps, 15 minutes, 200 pounds.
-- Select Exercise.Name, ExerciseInstanceUnitValue.Value, and Unit.Name
-- for the 'Plank' exercise. 
-- How many Planks are configured, which Units apply, and what 
-- are the configured Values?
-- 4 rows, 1 Unit, and 4 distinct Values
--------------------
SELECT
	e.`Name` ExerciseName,
    uv.`Value`,
    u.`Name` UnitName
FROM Exercise e
INNER JOIN ExerciseInstance ei ON e.ExerciseId = ei.ExerciseId
LEFT OUTER JOIN ExerciseInstanceUnitValue uv
	ON ei.ExerciseInstanceId = uv.ExerciseInstanceId
LEFT OUTER JOIN Unit u On uv.UnitId = u.UnitId
WHERE e.`Name` = 'Plank';
