DROP DATABASE IF EXISTS PWHotelDB;

CREATE DATABASE PWHotelDB;

USE PWHotelDB;

CREATE TABLE Guest (
    guestID INT PRIMARY KEY AUTO_INCREMENT,
    guestname VARCHAR(50) NOT NULL,
    address VARCHAR(50) NOT NULL,
    city VARCHAR(50) NOT NULL,
    state VARCHAR(50) NOT NULL,
    zip VARCHAR(50) NOT NULL,
    phone VARCHAR(25) NOT NULL
);

CREATE TABLE Amenity (
	amenityID INT PRIMARY KEY AUTO_INCREMENT,
    description VARCHAR(50) NOT NULL
);

CREATE TABLE RoomType (
	room_typeID INT PRIMARY KEY AUTO_INCREMENT,
    description VARCHAR(50) NOT NULL
);

CREATE TABLE Room (
	roomID INT PRIMARY KEY AUTO_INCREMENT,
    room_number INT NOT NULL,
    ada_accessible VARCHAR(50) NOT NULL,
    standard_occupancy INT NOT NULL,
    maximun_occupancy INT NOT NULL,
    base_price DOUBLE NOT NULL,
    extra_person int NOT NULL,
    room_typeID INT NOT NULL
);

CREATE TABLE Reservation (
    reservationID INT PRIMARY KEY AUTO_INCREMENT,
    reservationname VARCHAR(50) NOT NULL,
    adults INT NOT NULL,
    children INT NOT NULL,
    start_date TIMESTAMP NOT NULL,
    end_date TIMESTAMP NOT NULL,
    total_room_cost DOUBLE NOT NULL,
    roomID INT NOT NULL,
    guestID INT NOT NULL,
    CONSTRAINT fk_Reservation_Room
        FOREIGN KEY (roomID) 
        REFERENCES Room(roomID),
	CONSTRAINT fk_Guest_Reservation
        FOREIGN KEY (guestID) 
        REFERENCES Guest(guestID)
);

CREATE TABLE RoomAmenity (
	roomID INT NOT NULL,
    amenityID INT NOT NULL,
    PRIMARY KEY pk_RoomAmenity (roomID, amenityID),
    FOREIGN KEY fk_RoomAmenity_Room (roomID)
		REFERENCES Room(roomID),
	FOREIGN KEY fk_RoomAmenity_Amenity (amenityID)
		REFERENCES Amenity(amenityID)
);


USE PWHotelDB;

INSERT INTO Amenity (description) values ('Microwave'), ("Jacuzzi"), ("Refrigerator"), ("Oven");

INSERT INTO RoomType (description) values ('Single'), ('Double'), ('Suite');

INSERT INTO Room (room_number, ada_accessible, standard_occupancy, maximun_occupancy, base_price, extra_person, room_typeid) VALUES 
	(201, 'No', 2, 4, 199.99, 10.0, 2),
	(202, 'Yes', 2, 4, 174.99, 10.0, 2),
	(203, 'No', 2, 4, 199.99, 10.0, 2),
	(204, 'Yes', 2, 4, 174.99, 10.0, 2),
	(205, 'No', 2, 2, 174.99, null, 1),
	(206, 'Yes', 2, 2, 149.99, null, 1),
	(207, 'No', 2, 2, 174.99, null, 1),
	(208, 'Yes', 2, 2, 149.99, null, 1),
	(301, 'No', 2, 4, 199.99, 10.0, 2),
	(302, 'Yes', 2, 4, 174.99, 10.0, 2),
	(303, 'No', 2, 4, 199.99, 10.0, 2),
	(304, 'Yes', 2, 4, 174.99, 10.0, 2),
	(305, 'No', 2, 2, 174.99, null, 1),
	(306, 'Yes', 2, 2, 149.99, null, 1),
	(307, 'No', 2, 2, 174.99, null, 1),
	(308, 'Yes', 2, 2, 149.99, null, 1),
	(401, 'Yes', 3, 8, 399.99, 20.0, 3),
	(402, 'Yes', 3, 8, 399.99, 20.0, 3);

INSERT INTO Guest (guestname, address, city, state, zip, phone) VALUES
	('Pin Wei Tan',	'Pasir Ris St 71',	'Singapore', 'SG', '510773', '(65) 789-4567'),
	('Mack Simmer',	'379 Old Shore Street',	'Council Bluffs', 'IA',	'51501', '(291) 553-0508'),
	('Bettyann Seery', '750 Wintergreen Dr.', 'Wasilla', 'AK',	'99654', '(478) 277-9632'),
	('Duane Cullison', '9662 Foxrun Lane', 'Harlingen', 'TX', '78552', '(308) 494-0198'),
	('Karie Yang', '9378 W. Augusta Ave.', 'West Deptford', 'NJ', '08096', '(214) 730-0298'),
	('Aurore Lipton', '762 Wild Rose Street', 'Saginaw', 'MI', '48601', '(377) 507-0974'),
	('Zachery Luechtefeld',	'7 Poplar Dr.',	'Arvada', 'CO',	'80003', '(814) 485-2615'),
	('Jeremiah Pendergrass', '70 Oakwood St.', 'Zion', 'IL', '60099', '(279) 491-0960'),
	('Walter Holaway',	'7556 Arrowhead St.', 'Cumberland', 'RI', '02864', '(446) 396-6785'),
	('Wilfred Vise', '77 West Surrey Street', 'Oswego', 'NY', '13126', '(834) 727-1001'),
	('Maritza Tilton', '939 Linda Rd.',	'Burke', 'VA',	'22015', '(446) 351-6860'),
	('Joleen Tison', '87 Queen St.', 'Drexel Hill', 'PA', '19026', '(231) 893-2755');

INSERT INTO PWHotelDB.Reservation (reservationname, adults, children, start_date, end_date, total_room_cost, roomId, guestId) VALUES 
	('Mack Simmer', 1, 0, '2023-2-2', '2023-2-4', 299.98, 16, 2),
	('Bettyann Seery', 2, 1, '2023-2-5', '2023-2-10', 999.95, 3, 3),
	('Duane Cullison', 2, 0, '2023-2-22', '2023-2-24', 349.98, 13, 4),
	('Karie Yang', 2, 2, '2023-3-6', '2023-3-7', 199.99, 1, 5),
	('Pin Wei Tan', 1, 1, '2023-3-17', '2023-3-20', 524.97, 15, 1),
	('Aurore Lipton', 3, 0, '2023-3-18', '2023-3-23', 924.95, 10, 6),
	('Zachery Luechtefeld', 2, 2, '2023-3-29', '2023-3-31', 349.98, 2, 7),
	('Jeremiah Pendergrass', 2, 0, '2023-3-31', '2023-4-5', 874.95, 12, 8),
	('Walter Holaway', 1, 0, '2023-4-9', '2023-4-13', 799.96, 9, 9),
	('Wilfred Vise', 1, 1, '2023-4-23', '2023-4-24', 174.99, 7, 10),
	('Maritza Tilton', 2, 4, '2023-5-30', '2023-6-2', 1199.97, 17, 11),
	('Joleen Tison', 2, 0, '2023-6-10', '2023-6-14', 599.96, 6, 12),
	('Joleen Tison', 1, 0, '2023-6-10', '2023-6-14', 599.96, 8, 12),
	('Aurore Lipton', 3, 0, '2023-6-17', '2023-6-18', 184.99, 12, 6),
	('Pin Wei Tan', 2, 0, '2023-6-28', '2023-7-2', 699.96, 5, 1),
	('Walter Holaway', 3, 1, '2023-7-13', '2023-7-14', 184.99, 4, 9),
	('Wilfred Vise', 4, 2, '2023-7-18', '2023-7-21', 1259.97, 17, 10),
	('Bettyann Seery', 2, 1, '2023-7-28', '2023-7-29', 199.99, 11, 3),
	('Bettyann Seery', 1, 0, '2023-8-30', '2023-9-1', 349.98, 13, 3),
	('Mack Simmer', 2, 0, '2023-9-16', '2023-9-17', 149.99, 8, 2),
	('Karie Yang', 2, 2, '2023-9-13', '2023-9-15', 399.98, 3, 5),
	('Duane Cullison', 2, 2, '2023-11-22', '2023-11-25', 1199.97, 17, 4),
	('Mack Simmer', 2, 0, '2023-11-22', '2023-11-25', 449.97, 6, 2),
	('Mack Simmer', 2, 2, '2023-11-22', '2023-11-25', 599.97, 9, 2),
	('Maritza Tilton', 2, 0, '2023-12-24', '2023-12-28', 699.96, 10, 11);


INSERT INTO PWHotelDB.RoomAmenity (roomID, amenityID) VALUES
	(1, 1),
	(1, 2),
	(2, 3),
	(3, 1),
	(3, 2),
	(4, 3),
	(5, 1),
	(5, 3),
	(5, 2),
	(6, 1),
	(6, 3),
	(7, 1),
	(7, 3),
	(7, 2),
	(8, 1),
	(8, 3),
	(9, 1),
	(9, 2),
	(10, 3),
	(11, 1),
	(11, 2),
	(12, 3),
	(13, 1),
	(13, 3),
	(13, 2),
	(14, 1),
	(14, 3),
	(15, 1),
	(15, 3),
	(15, 2),
	(16, 1),
	(16, 3),
	(17, 1),
	(17, 3),
	(17, 4),
	(18, 1),
	(18, 3),
	(18, 4);

-- 1. Write a query that returns a list of reservations that end in July 2023, including the name of the guest, the room number(s), and the reservation dates.

SELECT reservationname, room_number, start_date, end_date FROM Reservation
INNER join Room ON Reservation.roomID = Room.roomID
WHERE MONTH(end_date) IS 7 AND YEAR(end_date) = 2023;


-- 2. Write a query that returns a list of all reservations for rooms with a jacuzzi, displaying the guest's name, the room number, and the dates of the reservation.
SELECT reservationname, room_number, start_date, end_date FROM Reservation
INNER JOIN Room ON Reservation.roomID = Room.roomID
INNER JOIN RoomAmenity ON Room.roomID = RoomAmenity.roomID AND RoomAmenity.amenityID = 2;

SELECT reservationname, room_number, start_date, end_date FROM Room
JOIN Reservation ON Room.roomID = Reservation.roomID
JOIN RoomAmenity ON Reservation.roomID = RoomAmenity.roomID AND RoomAmenity.amenityID = 2;

-- 3. Write a query that returns all the rooms reserved for a specific guest, including the guest's name, the room(s) reserved, the starting date of the reservation, and how many people were included in the reservation. (Choose a guest's name from the existing data.)

SELECT 	
	reservationname
    room_number,
    start_date,
    (adults + children) as total_guests
FROM Reservation
INNER JOIN Room ON Reservation.roomID = Room.roomID 
WHERE Reservation.guestID = 1;

-- Write a query that returns a list of rooms, reservation ID, and per-room cost for each reservation. The results should include all rooms, whether or not there is a reservation associated with the room.
SELECT room_number, reservationID, total_room_cost FROM Room
LEFT OUTER JOIN Reservation 
    ON Room.roomID = Reservation.roomID ;
  
  
SELECT room_number, reservationID, total_room_cost FROM Reservation
RIGHT OUTER JOIN Room
ON Reservation.roomID = Room.roomID;


-- 5. Write a query that returns all the rooms accommodating at least three guests and that are reserved on any date in April 2023.
SELECT * FROM Room
INNER JOIN Reservation ON Room.roomID = Reservation.roomID 
WHERE maximun_occupancy >= 3 AND MONTH(start_date) = 4 AND YEAR(start_date) = 2023;



-- 6. Write a query that returns a list of all guest names and the number of reservations per guest, sorted starting with the guest with the most reservations and then by the guest's last name.
SELECT 
SUBSTRING_INDEX(Guest.guestname, ' ', -1) as LastName,
COUNT(Reservation.reservationID) AS totalamountofreservations
FROM Guest
INNER JOIN Reservation ON Guest.guestID = Reservation.guestID 
GROUP BY Reservation.guestId
ORDER BY totalamountofreservations DESC;





-- 7. Write a query that displays the name, address, and phone number of a guest based on their phone number. (Choose a phone number from the existing data.)
SELECT Phone from Guest;
SELECT guestname, address, phone FROM Guest
WHERE Phone = '(65) 789-4567';
