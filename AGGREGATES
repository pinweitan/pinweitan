use PersonalTrainer;
SELECT COUNT(*) FROM CLIENT
-- Use an aggregate to count the number of Clients.
-- 500 rows
--------------------
SELECT  COUNT(CLIENT.BIRTHDATE) FROM Client
-- Use an aggregate to count Client.BirthDate.
-- The number is different than total Clients. Why?
-- 463 rows
--------------------
SELECT
	City,
    COUNT(*)
FROM Client
GROUP BY City
ORDER BY COUNT(*) DESC;


-- Group Clients by City and count them.
-- Order by the number of Clients desc.
-- 20 rows
--------------------
SELECT PRICE*QUALITY AS REVENUE, SUM(REVENUE) EROM INVOICELINEITEM
GROUP BY INVOICEID

SELECT
	InvoiceId,
    SUM(Price * Quantity) AS InvoiceTotal
FROM InvoiceLineItem
GROUP BY InvoiceId;

-- Calculate a total per invoice using only the InvoiceLineItem table.
-- Group by InvoiceId.
-- You'll need an expression for the line item total: Price * Quantity.
-- Aggregate per group using SUM().
-- 1000 rows
--------------------
SELECT
	InvoiceId,
    SUM(Price * Quantity) AS InvoiceTotal
FROM InvoiceLineItem
GROUP BY InvoiceId
HAVING SUM(PRICE*QUANTITY) > 500
ORDER BY SUM(PRICE*QUANTITY)

-- Calculate a total per invoice using only the InvoiceLineItem table.
-- (See above.)
-- Only include totals greater than $500.00.
-- Order from lowest total to highest.
-- 234 rows
--------------------
SELECT AVG(PRICE * QUANTITY) AS AVGLINEITEMTOTAL, DESCRIPTION
FROM INVOICELINEITEM
GROUP BY INVOICELINEITEM.DESCRIPTION

-- Calculate the average line item total
-- grouped by InvoiceLineItem.Description.
-- 3 rows
--------------------
SELECT
	CLIENT.ClientId,
    FirstName,
    LastName,
    SUM(InvoiceLineItem.Price * InvoiceLineItem.Quantity) Total
FROM Client 
INNER JOIN Invoice ON CLIENT.ClientId = INVOICE.ClientId
INNER JOIN InvoiceLineItem ON INVOICE.InvoiceId = INVOICELINEITEM.InvoiceId
WHERE INVOICE.InvoiceStatus = 2
GROUP BY CLIENT.ClientId, CLIENT.FirstName, CLIENT.LastName
HAVING SUM(INVOICELINEITEM.Price * INVOICELINEITEM.Quantity) > 1000.00
ORDER BY CLIENT.LastName, CLIENT.FirstName;
-- Select ClientId, FirstName, and LastName from Client
-- for clients who have *paid* over $1000 total.
-- Paid is Invoice.InvoiceStatus = 2.
-- Order by LastName, then FirstName.
-- 146 rows
--------------------
SELECT
	EXERCISECATEGORY.NAME AS CategoryName,
    COUNT(EXERCISE.ExerciseId) AS ExerciseCount
FROM ExerciseCategory 
INNER JOIN Exercise  ON EXERCISECATEGORY.ExerciseCategoryId = EXERCISE.ExerciseCategoryId
GROUP BY eXERCISecategory.ExerciseCategoryId, EXERCISECATEGORY.NAME
ORDER BY COUNT(EXERCISE.ExerciseId) DESC
SELECT
	c.`Name` CategoryName,
    COUNT(e.ExerciseId) ExerciseCount
FROM ExerciseCategory c
INNER JOIN Exercise e ON c.ExerciseCategoryId = e.ExerciseCategoryId
GROUP BY c.ExerciseCategoryId, c.`Name`
ORDER BY COUNT(e.ExerciseId) DESC;
-- Select Exercise.Name along with the minimum, maximum,
-- and average ExerciseInstance.Sets.
-- Order by Exercise.Name.
-- 64 rows
--------------------
SELECT
	EXERCISE.NAME AS ExerciseName,
    MIN(exerciseinstance.Sets) MinSets,
    MAX(EXERCISEINSTANCE.Sets) MaxSets,
    AVG(EXERCISEINSTANCE.Sets) AvgSets
FROM Exercise 
INNER JOIN ExerciseInstance  ON EXERCISE.ExerciseId = EXERCISEINSTANCE.ExerciseId
GROUP BY EXERCISE.ExerciseId, EXERCISE.NAME
ORDER BY EXERCISE.Name;





-- Find the minimum and maximum Client.BirthDate
-- per Workout.
-- 26 rows
-- Sample: 
-- WorkoutName, EarliestBirthDate, LatestBirthDate
-- '3, 2, 1... Yoga!', '1928-04-28', '1993-02-07'
--------------------
SELECT
	WORKOUT.Name AS WorkoutName,
	MIN(CLIENT.BirthDate) EarliestBirthDate,
    MAX(CLIENT.BirthDate) LatestBirthDate
FROM Workout 
INNER JOIN ClientWorkout ON WORKOUT.WorkoutId = CLIENTWORKOUT.WorkoutId
INNER JOIN Client  ON CLIENTWORKOUT.ClientId = CLIENT.ClientId
GROUP BY WORKOUT.WorkoutId, WORKOUT.Name
ORDER BY WORKOUT.Name;

-- Count client goals.
-- Be careful not to exclude rows for clients without goals.
-- 500 rows total
-- 50 rows with no goals
--------------------
SELECT
	client.ClientId,
    COUNT(CLIENTGOAL.GoalId) AS GoalCount
FROM Client 
LEFT OUTER JOIN ClientGoal ON CLIENT.ClientId = CLIENTGOAL.ClientId
GROUP BY CLIENT.ClientId
ORDER BY COUNT(CLIENTGOAL.GoalId) ;

-- Select Exercise.Name, Unit.Name, 
-- and minimum and maximum ExerciseInstanceUnitValue.Value
-- for all exercises with a configured ExerciseInstanceUnitValue.
-- Order by Exercise.Name, then Unit.Name.
-- 82 rows
--------------------
SELECT
	EXERCISE.Name ExerciseName,
    UNIT.Name AS UnitName,
    MIN(EXERCISEINSTANCEUNITVALUE.Value) MinValue,
    MAX(EXERCISEINSTANCEUNITVALUE.Value) 'MaxValue'
FROM Exercise 
INNER JOIN ExerciseInstance 
	ON EXERCISE.ExerciseId = EXERCISEINSTANCE.ExerciseId
INNER JOIN ExerciseInstanceUnitValue  
	ON EXERCISEINSTANCE.ExerciseInstanceId = EXERCISEINSTANCEUNITVALUE.ExerciseInstanceId
INNER JOIN Unit  ON EXERCISEINSTANCEUNITVALUE.UnitId = UNIT.UnitId
GROUP BY EXERCISE.ExerciseId, EXERCISE.Name, UNIT.UnitId, UNIT.Name
ORDER BY EXERCISE.Name, UNIT.Name;

-- Modify the query above to include ExerciseCategory.Name.
-- Order by ExerciseCategory.Name, then Exercise.Name, then Unit.Name.
-- 82 rows
--------------------
SELECT
	EXERCISECATEGORY.Name AS CategoryName,
	EXERCISE.Name AS ExerciseName,
    UNIT.Name AS UnitName,
    MIN(EXERCISEINSTANCEUNITVALUE.Value) MinValue,
    MAX(exerciseinstanceunitvalue.Value) 'MaxValue'
FROM Exercise 
INNER JOIN ExerciseInstance  
	ON exercise.ExerciseId = exerciseinstance.ExerciseId
INNER JOIN ExerciseInstanceUnitValue  
	ON exerciseinstance.ExerciseInstanceId = exerciseinstanceunitvalue.ExerciseInstanceId
INNER JOIN Unit 
	ON EXERCISEINSTANCEUNITVALUE.UnitId = UNIT.UnitId
INNER JOIN ExerciseCategory 
	ON EXERCISE.ExerciseCategoryId = EXERCISECATEGORY.ExerciseCategoryId
GROUP BY EXERCISE.ExerciseId, EXERCISE.Name, UNIT.UnitId, UNIT.Name, exercisecategory.Name
ORDER BY EXERCISECATEGORY.Name, EXERCISE.`Name`, UNIT.`Name`;

-- Select the minimum and maximum age in years for
-- each Level.
-- To calculate age in years, use the MySQL function DATEDIFF.
-- 4 rows
--------------------
SELECT
	LEVEL.Name AS LevelName,
	MIN(DATEDIFF(CURDATE(), CLIENT.BirthDate) / 365) MinAge,
    MAX(DATEDIFF(CURDATE(), CLIENT.BirthDate) / 365) MaxAge
FROM Level 
INNER JOIN Workout  ON LEVEL.LevelId = WORKOUT.LevelId
INNER JOIN ClientWorkout ON WORKOUT.WorkoutId = CLIENTWORKOUT.WorkoutId
INNER JOIN Client  ON CLIENTWORKOUT.ClientId = CLIENT.ClientId
GROUP BY LEVEL.LevelId, LEVEL.`Name`;

-- Stretch Goal!
-- Count logins by email extension (.com, .net, .org, etc...).
-- Research SQL functions to isolate a very specific part of a string value.
-- 27 rows (27 unique email extensions)
--------------------
SELECT
	SUBSTRING_INDEX(EmailAddress, '.', -1),
    COUNT(EmailAddress)
FROM Login
GROUP BY SUBSTRING_INDEX(EmailAddress, '.', -1)
ORDER BY COUNT(EmailAddress) DESC;

-- Stretch Goal!
-- Match client goals to workout goals.
-- Select Client FirstName and LastName and Workout.Name for
-- all workouts that match at least 2 of a client's goals.
-- Order by the client's last name, then first name.
-- 139 rows
--------------------
SELECT
	WORKOUT.NamE AS WorkoutName,
    CONCAT(CLIENT.FirstName, ' ', CLIENT.LastName) ClientName,
    COUNT(CLIENTGOAL.GoalId)
FROM Client 
INNER JOIN ClientGoal  ON CLIENT.ClientId = CLIENTGOAL.ClientId
INNER JOIN WorkoutGoal  ON CLIENTGOAL.GoalId = WORKOUTGOAL.GoalId
INNER JOIN Workout  ON WORKOUTGOAL.WorkoutId = WORKOUT.WorkoutId
GROUP BY WORKOUT.WorkoutId, WORKOUT.Name, CLIENT.ClientId, CLIENT.FirstName, CLIENT.LastName
HAVING COUNT(CLIENTGOAL.GoalId) > 1
ORDER BY CLIENT.LastName, CLIENT.FirstName;
